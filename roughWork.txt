
#from riceKB.globalVars import pr, rdf_ns, rdf, rdfs_ns, rdfs, base_ns, base_uri,\
#    obo_ns, obo_uri, sio_ns, sio_uri, ncbi_tax_ns, ncbi_tax_uri, up_ns, uniprot,\
#    gr_g_ns, gramene_gene, gr_qtl_ns, gramene_qtl, sio_term, go_aspects,\
#    ont_aspects

    
def riceCycRDF(data_stuc, output_dir):
    pw_hash = {}
    react_hash = {}
    gene_hash = {} 
    previous_pw_id = ''
    pw_buffer = ''
    gene_buffer = ''
    react_buffer = ''
    pw_counter = 0
    gene_counter = 0
    tigr_pattern = re.compile(r'^LOC\_Os\d{1,2}g\d{5}\.\d$')
    sorghum_pattern = re.compile(r'^SB\d{2}G\d{6}\.\d$')
    
    cyc_turtle = "gramene.cyc.ttl"
    outfile = os.path.join(output_dir, cyc_turtle)
    outputWriter = open(outfile, "w")
    
    print "*************RiceCyc RDF conversion begins***********\n"
    
    outputWriter.write(base + "\t" + "<" + base_uri + "> .\n")
    outputWriter.write(pr + "\t" + rdf_ns + "<" + rdf + "> .\n")
    outputWriter.write(pr + "\t" + rdfs_ns + "<" + rdfs + "> .\n")
    outputWriter.write(pr + "\t" + owl_ns + "<" + owl + "> .\n")
    outputWriter.write(pr + "\t" + base_vocab_ns + "<" + base_vocab_uri + "> .\n")
    outputWriter.write(pr + "\t" + swo_ns + "<" + swo_uri + "> .\n")
    outputWriter.write(pr + "\t" + sio_ns + "<" + sio_uri + "> .\n")
    outputWriter.write(pr + "\t" + pathway_ns + "<" + pathway_uri + "> .\n")
    outputWriter.write(pr + "\t" + reaction_ns + "<" + reaction_uri + "> .\n")
    outputWriter.write(pr + "\t" + tigr_ns + "<" + tigr_uri + "> .\n")
    outputWriter.write(pr + "\t" + tigr_g_ns + "<" + tigr_g_uri + "> .\n")
    outputWriter.write(pr + "\t" + ensembl_ns + "<" + ensembl_plant + "> .\n")
    outputWriter.write(pr + "\t" + ec_code_ns + "<" + ec_code_uri + "> .\n\n")
    
    for records in data_stuc:
        gene_buffer = ''
        react_buffer = ''

        pw_id = records['PathwayId']
        
        rice_match = re.match(r'^LOC_', records['Gene'])
        if rice_match:
            gene = records['Gene'].replace("S", "s")
            gene = gene.replace("G", "g")
        else:
            gene = records['Gene']
            
        react = records['ReationId']
        
        if previous_pw_id and pw_id not in previous_pw_id:
            pw_buffer = re.sub(' ;$', ' .', pw_buffer)
            outputWriter.write(pw_buffer)
            pw_buffer = ''
        
        # Pathways
        if pw_id not in pw_hash:
            pw_counter += 1
            pw_buffer += pathway_ns + pw_id + "\n"
            pw_buffer += "\t" + rdf_ns + "type" + "\t" + owl_ns + "Class" + " ;\n"
            pw_buffer += "\t" + rdfs_ns + "subClassOf" + "\t" + sio_ns + met_pw_sio_term + " ;\n"
            pw_buffer += "\t" + rdfs_ns + "subClassOf" + "\t" + swo_ns + biocyc_pw_term + " ;\n"
            pw_buffer += "\t" + rdfs_ns + "label" + "\t" + '"%s"' % (records['PathwayName']) + " ;\n"
            
            pw_hash[pw_id] = 1
            previous_pw_id = pw_id
            
        if pw_id == previous_pw_id: #pw_id in pw_hash
            # Reactions
            if react:
                pw_buffer += "\t" + base_vocab_ns + "has_reaction" + "\t" + reaction_ns + react + " ;\n"
#                if react not in react_hash:
#                    pw_buffer += "\t" + base_vocab_ns + "has_reaction" + "\t" + reaction_ns + react + " ;\n"    
#                    react_buffer += reaction_ns + react + "\n"
#                    react_buffer += "\t" + rdf_ns + "type" + "\t" + owl_ns + "Class" + " ;\n"
#                    react_buffer += "\t" + rdfs_ns + "subClassOf" + "\t" + swo_ns + biocyc_react_term + " ;\n"
#                    if records['ReactionName']:
#                        react_buffer += "\t" + rdfs_ns + "label" + "\t" + '"%s"' % (records['ReactionName']) + " ;\n"
#                    if records['EC']:
#                        react_buffer += "\t" + base_vocab_ns + "has_ec_code" + "\t" + ec_code_ns + records['EC'] + " .\n"
#                    react_hash[react] = 1
            
            #Gene
            if tigr_pattern.match(gene):
                pw_buffer += "\t" + base_vocab_ns + "has_agent" + "\t" + tigr_ns + gene + " ;\n"
            else:
                pw_buffer += "\t" + base_vocab_ns + "has_agent" + "\t" + ensembl_ns + gene + " ;\n"
#            if gene not in gene_hash:
#                if tigr_pattern.match(gene): 
#                    pw_buffer += "\t" + base_vocab_ns + "has_agent" + "\t" + tigr_ns + gene + " ;\n"
#                else:
#                    pw_buffer += "\t" + base_vocab_ns + "has_agent" + "\t" + ensembl_ns + gene + " ;\n"
#                if tigr_pattern.match(gene):
#                    gene_buffer += tigr_ns + gene + "\n"
#                    gene_buffer += "\t" + rdf_ns + "type" + "\t" + owl_ns + "Class" + " ;\n"
#                    gene_buffer += "\t" + rdfs_ns + "label" + "\t" + '"%s"' % (records['Name']) + " ;\n"
#                    gene_buffer += "\t" + base_vocab_ns + "develops_from" + "\t" + tigr_g_ns + gene[:14] + " .\n" 
                    
#                    gene_hash[gene] = 1
#                    gene_counter += 1
#                elif sorghum_pattern.match(gene):
#                    gene_buffer += ensembl_ns + gene + "\n"
#                    gene_buffer += "\t" + rdf_ns + "type" + "\t" + owl_ns + "Class" + " ;\n"
#                    gene_buffer += "\t" + rdfs_ns + "label" + "\t" + '"%s"' % (records['Name']) + " ;\n"
#                    gene_buffer += "\t" + base_vocab_ns + "develops_from" + "\t" + ensembl_ns + gene[:11] + " .\n" 
                    
#                    gene_hash[gene] = 1
#                    gene_counter += 1
#                else:
#                    gene_buffer += ensembl_ns + gene + "\n"
#                    gene_buffer += "\t" + rdf_ns + "type" + "\t" + owl_ns + "Class" + " ;\n"
#                    gene_buffer += "\t" + rdfs_ns + "label" + "\t" + '"%s"' % (records['Name']) + " .\n"
                    
#                    gene_hash[gene] = 1
#                    gene_counter += 1
               
        previous_pw_id = pw_id
        
        outputWriter.write(react_buffer)
        outputWriter.write(gene_buffer)
        
    if previous_pw_id:
        pw_buffer = re.sub(' ;$', ' .', pw_buffer)
        outputWriter.write(pw_buffer)
        
    outputWriter.close()
    print "Number pathways and genes: %s and %s\n" % (str(pw_counter), str(gene_counter))
    print "******* RiceCyc RDF completed **********\n" 
    